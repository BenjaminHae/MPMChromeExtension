name: build extension and create release
on: #[push]
  push:
    tags:
      - 'v*'
jobs:
  build_and_release:
    name: build extension and create release
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: checkout API
        uses: actions/checkout@v2
        with:
          repository: BenjaminHae/modern-password-manager
          path: mpm
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Cache node
        uses: actions/cache@v2
        env:
          cache-name: cache-react-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install
        working-directory: .
      - run: npm link mpm/OpenAPIReactClient
        working-directory: .
      - run: npm install
        working-directory: ./src/popup
      - run: npm run clean && npm run build
        working-directory: .
        #env:
        #  CI: ""

      - name: get private key for signing extension
        run: 'echo "${KEY}" > key.pem'
        env:
          KEY: ${{ secrets.EXTENSION_SIGNING_KEY }}
      - name: generate crx file
        run: ./crxmake.sh dist key.pem && mv dist.crx password-manager-extension.crx
        working-directory: .
  #RELEASE
      - name: generate release name
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: generate release version
        run: "VERSION=$(grep '\"version\"' dist/manifest.json); echo \"${VERSION}\" | sed 's/^.*: \"/EXT_VERSION=/; s/\",\\s*$//') >> $GITHUB_ENV"
      - name: check if version matches
        run: "echo \"Release Name: ${{ env.RELEASE_VERSION }}\"; echo \"Extension Version v${{ env.EXT_VERSION }}\";[[ \"${{ env.RELEASE_VERSION }}\" == \"v${{ env.EXT_VERSION }}\" ]]"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body: ${{ github.event.head_commit.message }}
          draft: true
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      - name: Upload Release Artifact
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./password-manager-extension.crx
          asset_name: password-manager-extension.crx
          asset_content_type: application/x-chrome-extension
